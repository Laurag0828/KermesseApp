//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KermesseApp.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class KERMESSEEntities4 : DbContext
    {
        public KERMESSEEntities4()
            : base("name=KERMESSEEntities4")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<tbl_arqueocaja> tbl_arqueocaja { get; set; }
        public virtual DbSet<tbl_arqueocaja_det> tbl_arqueocaja_det { get; set; }
        public virtual DbSet<tbl_bonos> tbl_bonos { get; set; }
        public virtual DbSet<tbl_cat_producto> tbl_cat_producto { get; set; }
        public virtual DbSet<tbl_comunidad> tbl_comunidad { get; set; }
        public virtual DbSet<tbl_control_gastos> tbl_control_gastos { get; set; }
        public virtual DbSet<tbl_denominacion> tbl_denominacion { get; set; }
        public virtual DbSet<tbl_gastos> tbl_gastos { get; set; }
        public virtual DbSet<tbl_ingreso_com> tbl_ingreso_com { get; set; }
        public virtual DbSet<tbl_ingresocom_det> tbl_ingresocom_det { get; set; }
        public virtual DbSet<tbl_kermesse> tbl_kermesse { get; set; }
        public virtual DbSet<tbl_listaprecio> tbl_listaprecio { get; set; }
        public virtual DbSet<tbl_listaprecio_det> tbl_listaprecio_det { get; set; }
        public virtual DbSet<tbl_moneda> tbl_moneda { get; set; }
        public virtual DbSet<tbl_opciones> tbl_opciones { get; set; }
        public virtual DbSet<tbl_parroquia> tbl_parroquia { get; set; }
        public virtual DbSet<tbl_productos> tbl_productos { get; set; }
        public virtual DbSet<tbl_rol> tbl_rol { get; set; }
        public virtual DbSet<tbl_rol_opciones> tbl_rol_opciones { get; set; }
        public virtual DbSet<tbl_rol_usuario> tbl_rol_usuario { get; set; }
        public virtual DbSet<tbl_tasacambio> tbl_tasacambio { get; set; }
        public virtual DbSet<tbl_tasacambio_det> tbl_tasacambio_det { get; set; }
        public virtual DbSet<tbl_usuario> tbl_usuario { get; set; }
        public virtual DbSet<vw_opciones> vw_opciones { get; set; }
        public virtual DbSet<vw_rol> vw_rol { get; set; }
        public virtual DbSet<vw_rol_opciones> vw_rol_opciones { get; set; }
        public virtual DbSet<vw_rol_usuario> vw_rol_usuario { get; set; }
        public virtual DbSet<vw_listaprecio> vw_listaprecio { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
